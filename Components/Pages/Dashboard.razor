@page "/dashboard"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject AuthenticationStateService authStateService
@inject NavigationManager navigationManager
@inject ITransactionService transactionService
@using MudBlazor

@if (authStateService.IsAuthenticated())
{
    <div class="p-4">
        <div class="heading">Welcome back, @authStateService.GetAuthenticatedUser().UserName!</div>

        <!-- Summary Section -->
        <div class="d-flex col-12 gap-3">
            <div class="available d-flex p-lg-3 align-items-center">
                <div>
                    <div class="availableText">Available Balance</div>
                    <div class="availableBalance">@($"{preferredCurrency} {AvailableBalance}")</div>
                </div>
            </div>
            <div class="d-flex flex-column gap-3 flex-grow-1">
                <div class="d-flex gap-3 flex-grow-1">
                    <div class="card">
                        <div class="cardTitle">Total Transactions</div>
                        <div class="cardContent">@totalTransactions</div>
                    </div>
                    <div class="card">
                        <div class="cardTitle">Total Inflows</div>
                        <div class="cardContent">@($"{preferredCurrency} {TotalIncome}")</div>
                    </div>
                    <div class="card">
                        <div class ="cardTitle">Total Outflows</div>
                        <div class="cardContent">@($"{preferredCurrency} {TotalOutflows}")</div>
                    </div>
                </div>

                <div class="d-flex gap-3 w-100">
                    <div class="card">
                        <div class="cardTitle">Total Debt</div>
                        <div class="cardContent">@($"{preferredCurrency} {TotalDebt}")</div>
                    </div>
                    <div class="card">
                        <div class="cardTitle">Total Cleared Debt</div>
                        <div class="cardContent">@totalClearedDebt</div>
                    </div>
                    <div class="card">
                        <div class="cardTitle">Total Pending Debt</div>
                        <div class="cardContent">@totalPendingDebt</div>
                    </div>
                </div>
             </div>
        </div>

        <div class="d-flex w-100 gap-3 mt-4">

        <!-- Pie Chart for Overview -->
            <div class="w-50 piechart">

                <MudPaper Class="pa-4">
                    <div class="heading">Financial Overview</div>
                    <MudChart ChartType="ChartType.Pie" InputData="@pieChartData" InputLabels="@pieChartLabels" Width="400px" Height="500px"/>
                </MudPaper>
             </div>


            <!-- Pending Debts -->
            <div class="pendingList">
                <div class="heading">Pending Debts</div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>S.No</th>
                            <th>Source</th>
                            <th>Amount</th>
                            <th>Due Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (debt, index) in pendingDebts.Select((d, i) => (d, i + 1)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@debt.Source</td>
                                <td>@($"{preferredCurrency} {debt.Amount}")</td>
                                <td>@debt.DueDate?.ToString("yyyy-MM-dd")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
            <!-- Highest and Lowest Transactions -->
        <div class="d-flex gap-2 mt-5 dateRange align-items-center">
            <div class="dateRangeTitle">Filter Transactions by Date</div>
            <div class="datePickerContainer">
                <div class="datePicker">
                    <label for="fromDate">From:</label>
                    <input type="date" id="fromDate" class="formControl"
                            value="@fromDate?.ToString("yyyy-MM-dd")"
                            @onchange="e => {
                        fromDate = string.IsNullOrEmpty(e.Value?.ToString())
                            ? (DateTime?)null
                            : DateTime.Parse(e.Value.ToString());
                        ApplyFilters();
                    }" />
                </div>
                <div class="datePicker">
                    <label for="toDate">To:</label>
                    <input type="date" id="toDate" class="formControl"
                            value="@toDate?.ToString("yyyy-MM-dd")"
                            @onchange="e => {
                        toDate = string.IsNullOrEmpty(e.Value?.ToString())
                            ? (DateTime?)null
                            : DateTime.Parse(e.Value.ToString());
                        ApplyFilters();
                    }" />
                </div>
            </div>
        </div>
        <div class="d-flex mt-3 gap-3">
            <div class="list">
                <div class="heading">Highest Transactions</div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>S.No</th>
                            <th>Title</th>
                            <th>Date</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (transaction, index) in highestTransactions.Select((d, i) => (d, i + 1)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@transaction.Description</td>
                                <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                                <td>@($"{preferredCurrency} {transaction.Amount}")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="list">
                <div class="heading">Lowest Transactions</div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>S.No</th>
                            <th>Title</th>
                            <th>Date</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (transaction, index) in lowestTransactions.Select((d, i) => (d, i + 1)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@transaction.Description</td>
                                <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                                <td>@($"{preferredCurrency} {transaction.Amount}")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
}

@code {
    private string preferredCurrency;
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> pendingDebts = new List<Transaction>();
    private List<Transaction> highestTransactions = new List<Transaction>();
    private List<Transaction> lowestTransactions = new List<Transaction>();
    private DateTime? fromDate;
    private DateTime? toDate;

    private decimal TotalIncome => transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
    private decimal TotalOutflows => transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
    private decimal TotalDebt => transactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
    private decimal AvailableBalance => TotalIncome + TotalDebt - TotalOutflows;

    private int totalTransactions => transactions.Count;
    private decimal clearedDebt => transactions.Where(t => t.Type == "Debt" && t.Status == "Cleared").Sum(t => t.Amount);
    private int totalClearedDebt => transactions.Count(t => t.Type == "Debt" && t.Status == "Cleared");
    private decimal pendingDebt => transactions.Where(t => t.Type == "Debt" && t.Status == "Pending").Sum(t => t.Amount);
    private int totalPendingDebt => transactions.Count(t => t.Type == "Debt" && t.Status == "Pending");

    private string[] pieChartLabels = { "Inflows", "Outflows", "Debt" };
    private double[] pieChartData;

    protected override async Task OnInitializedAsync()
    {
        var authenticatedUser = authStateService.GetAuthenticatedUser();
        if (authenticatedUser != null)
        {
            preferredCurrency = authenticatedUser.PreferredCurrency;
        }
        transactions = await transactionService.GetTransactionsAsync();

        // Calculate pending debts
        pendingDebts = transactions.Where(t => t.Type == "Debt" && t.Status == "Pending").ToList();

        // Sort transactions by amount for highest and lowest
        highestTransactions = transactions.OrderByDescending(t => t.Amount).Take(5).ToList();
        lowestTransactions = transactions.OrderBy(t => t.Amount).Take(5).ToList();

        // Prepare pie chart data
        pieChartData = new double[] { (double)TotalIncome, (double)TotalOutflows, (double)TotalDebt };
    }

    private void ApplyFilters()
    {
        // Apply filters to highest transactions
        highestTransactions = transactions
            .Where(t =>
                (!fromDate.HasValue || t.Date >= fromDate) &&
                (!toDate.HasValue || t.Date <= toDate))
            .OrderByDescending(t => t.Amount)
            .Take(5)
            .ToList();

        // Apply filters to lowest transactions
        lowestTransactions = transactions
            .Where(t =>
                (!fromDate.HasValue || t.Date >= fromDate) &&
                (!toDate.HasValue || t.Date <= toDate))
            .OrderBy(t => t.Amount)
            .Take(5)
            .ToList();

        // Notify the UI to update
        StateHasChanged();
    }
}
