@page "/transactions"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject AuthenticationStateService authStateService
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
using Microsoft.JSInterop;
@inject ITransactionService transactionService
@using Microsoft.JSInterop
@using MudBlazor


@if (authStateService.IsAuthenticated())
{
    <div class="p-4">
        <div class="d-flex justify-content-between">
            <h2>Transactions</h2>


            <div class="d-flex gap-3">
                <!-- Add Transaction Button -->
                <MudButton Variant="Variant.Filled"
                StartIcon="@Icons.Material.Filled.Add"
                IconColor="Color.Secondary"
                Size="Size.Large"
                @onclick="@(() => navigationManager.NavigateTo("/add-transaction"))"
                Style="background-color: #001B2E; color: white; border-radius:10px;">
                    Add Transaction
                </MudButton>

                <!-- Export Button -->
                <MudButton Variant="Variant.Filled"
                StartIcon="@Icons.Material.Filled.Download"
                IconColor="Color.Secondary"
                Size="Size.Large"
                OnClick="ExportTransactions"
                Style="background-color: #001B2E; color: white; border-radius:10px;">
                    Export Transactions
                </MudButton>
            </div>

        </div>

    <!-- Filters and Search Bar -->
    <div class="my-3">
        <div class="tagFilter">
            <button class="btn-tab @(activeFilter == "All" ? "active" : "")" @onclick="ClearFilters">All</button>
            <button class="btn-tab @(activeFilter == "Income" ? "active" : "")" @onclick="FilterIncome">Income</button>
            <button class="btn-tab @(activeFilter == "Expense" ? "active" : "")" @onclick="FilterExpense">Expense</button>
            <button class="btn-tab @(activeFilter == "Debt" ? "active" : "")" @onclick="FilterDebt">Debt</button>
        </div>

        <div class="d-flex gap-2 mt-5">

            <input type="text" class="form-control" placeholder="Search by Title or Tag"
            value="@searchTerm"
            @oninput="e => { searchTerm = e.Value.ToString(); ApplyFilters(); }" />

            <div class="d-flex gap-2 align-items-center">
                <div class="d-flex gap-2 align-items-center">
                    <div>From:</div>
                    <input type="date" class="form-control" 
                    value="@fromDate?.ToString("yyyy-MM-dd")"
                    @onchange="e => {
                       fromDate = string.IsNullOrEmpty(e.Value?.ToString())
                           ? (DateTime?)null
                           : DateTime.Parse(e.Value.ToString());
                       ApplyFilters();
                   }" />
                </div>
                <div class="d-flex gap-2 align-items-center">
                    <div>To:</div>
                    <input type="date" class="form-control" 
                    value="@toDate?.ToString("yyyy-MM-dd")"
                    @onchange="e => {
                       toDate = string.IsNullOrEmpty(e.Value?.ToString())
                           ? (DateTime?)null
                           : DateTime.Parse(e.Value.ToString());
                       ApplyFilters();
                   }" />
                </div>
            </div>

        </div>

        </div>
   


    <!-- Transaction List -->
    <div class="transaction-list">
        <table class="table">
            <thead>
                <tr>
                    <th>S.No</th>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Date
                        @if (currentSortOrder == "Ascending")
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                                           @onclick="ToggleSortOrder"
                                           Color="Color.Primary"
                                           Size="Size.Small" />
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                                           @onclick="ToggleSortOrder"
                                           Color="Color.Primary"
                                           Size="Size.Small" />
                        }

                    </th>
                    <th>Type</th>
                    <th>Tag</th>
                    <th>Notes</th>
                    <th/>
                </tr>
            </thead>
                <tbody>
                    @if (!filteredTransactions.Any())
                    {
                        <tr>
                            <td colspan="6" class="no-transactions">No transactions</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var (transaction, index) in filteredTransactions.Select((t, i) => (t, i + 1)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@transaction.Description</td>
                                <td>@($"{preferredCurrency} {transaction.Amount}")</td>
                                <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <div class="chip @(transaction.Type == "Income" ? "income" : transaction.Type == "Expense" ? "expense" : "debt")">
                                        <span class="icon"></span>
                                        @transaction.Type
                                    </div>
                                </td>
                                <td>@transaction.Tag</td>
                                <td>@(string.IsNullOrEmpty(transaction.Note) ? "-" : transaction.Note)</td>
                              
                                 <td>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   @onclick="() => OpenDeleteDialog(transaction.Sno)"
                                   Style="border-radius: 50%; background-color: #FFE6E6; color: #8F2929;" />
                                 </td>

                            </tr>
                        }
                    }
                </tbody>

        </table>
    </div>
    </div>

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">Delete Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this transaction?</p>
                </div>
                <div class="modal-footer">
                    <MudButton Variant="Variant.Filled"
                                Size="Size.Medium"
                                OnClick="CloseDeleteModal"
                                Style="background-color: #001B2E; color: white; border-radius:10px;">
                        Cancel
                    </MudButton><MudButton Variant="Variant.Filled"
                                            Size="Size.Medium"
                                            OnClick="DeleteTransaction"
                                            Style="background-color: #001B2E; color: white; border-radius:10px;">
                        Delete
                    </MudButton>
                </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}


@code {
    private string preferredCurrency;
    private string searchTerm;
    private string activeFilter = "All";
    private Transaction newTransaction = new Transaction();
    private DateTime? fromDate;
    private DateTime? toDate;
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> filteredTransactions = new List<Transaction>();
    private string currentSortOrder = "Ascending";
    private bool showDeleteModal = false;
    private int transactionToDeleteSno;

    protected override async Task OnInitializedAsync()
    {
        transactions = await transactionService.GetTransactionsAsync();
        ApplyFilters();

        var authenticatedUser = authStateService.GetAuthenticatedUser();
        if (authenticatedUser != null)
        {
            preferredCurrency = authenticatedUser.PreferredCurrency;
        }
    }

    private void ApplyFilters()
    {
        filteredTransactions = transactions
     .Where(t =>
         // Apply active filter
         (activeFilter == "All" || t.Type.Equals(activeFilter, StringComparison.OrdinalIgnoreCase)) &&

         // Apply search filter
         (string.IsNullOrWhiteSpace(searchTerm) ||
          t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
          t.Tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&

         // Apply date range filter
         (!fromDate.HasValue || t.Date >= fromDate) &&
         (!toDate.HasValue || t.Date <= toDate))
     .OrderBy(t => currentSortOrder == "Ascending" ? t.Date.Ticks : -t.Date.Ticks) 
     .ToList();


        StateHasChanged();
    }

    private void OnTransactionTypeChange(ChangeEventArgs e)
    {
        newTransaction.Type = e.Value.ToString();
    }

    private void FilterIncome() => SetActiveFilter("Income");
    private void FilterExpense() => SetActiveFilter("Expense");
    private void FilterDebt() => SetActiveFilter("Debt");
    private void ClearFilters() => SetActiveFilter("All");

    private void SetActiveFilter(string filterType)
    {
        activeFilter = filterType;
        ApplyFilters();
    }

    private void ToggleSortOrder()
    {
        currentSortOrder = currentSortOrder == "Ascending" ? "Descending" : "Ascending";
        ApplyFilters();
    }

    private async Task ExportTransactions()
    {
        try
        {
            string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Transactions.json");

            await transactionService.ExportTransactionsAsync(filePath);

            byte[] fileBytes = await File.ReadAllBytesAsync(filePath);
            var fileUrl = $"data:application/json;base64,{Convert.ToBase64String(fileBytes)}";
            var fileName = "Transactions.json";

            await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);

            DialogService.ShowMessageBox("Export Success", $"Transactions have been exported to {filePath}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error exporting transactions: {ex.Message}");
            DialogService.ShowMessageBox("Export Failed", "There was an error exporting the transactions.");
        }
    }

    private void OpenDeleteDialog(int sno)
    {
        transactionToDeleteSno = sno;  
        showDeleteModal = true;       
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false; 
    }

    private async Task DeleteTransaction()
    {
        try
        {
            await transactionService.DeleteTransactionAsync(transactionToDeleteSno);

            transactions = await transactionService.GetTransactionsAsync();

            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting transaction: {ex.Message}");
        }

        CloseDeleteModal();
    }


}

